#include "s21_matrix.h"

matrix_t test;
matrix_t test2;
matrix_t result_sum;
matrix_t result_sub;
matrix_t result_mult_num;
matrix_t result_mult;
matrix_t result_trans;
matrix_t result_calc;
matrix_t result_inv;
double deter_result = 0;
int res = 0;
double matrix[3][3] = {{0, 0, 0},
                      {0, 0, 0},
                      {0, 0, 0}};
double sum_matrix[3][2] = {{2, 4},
                          {6, 8},
                          {10, 12}};
double sub_matrix[3][2] = {{0, 0},
                          {0, 0},
                          {0, 0}};
double mult_num_matrix[3][2] = {{2, 4},
                               {6, 8},
                               {10, 12}};
double trans_matrix[3][3] = {{1, 3, 5},
                      {2, 4, 6}};
double calc_matrix[3][3] = {{0, 10, -20},
                      {4, -14, 8},
                      {-8, -2, 4}};
double inv_matrix[2][2] = {{-2.25, 1.25},
                    {1.75, -0.75}};
#test create1
res = s21_create_matrix(0, 5, &test);
ck_assert_int_eq(1, res);

#test create2
res = s21_create_matrix(-2, 5, &test);
ck_assert_int_eq(1, res);

#test create3
res = s21_create_matrix(3, 3, NULL);
ck_assert_int_eq(1, res);

#test create4
res = s21_create_matrix(3, 3, &test);
ck_assert_int_eq(0, res);
s21_remove_matrix(&test);

#test create5
s21_create_matrix(3, 3, &test);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        test.matrix[i][j] = 0;
    }
}
s21_remove_matrix(&test);


#test eq1
res = s21_eq_matrix(NULL, NULL);
ck_assert_int_eq(0, res);

#test eq2
s21_create_matrix(3, 3, &test);
s21_create_matrix(3, 3, &test2);
s21_fill_matrix(&test, 0.5);
s21_fill_matrix(&test2, 0.5);
test.matrix[0][1] = 2;
ck_assert_int_eq(1, s21_eq_matrix(&test, &test));
ck_assert_int_eq(0, s21_eq_matrix(&test, &test2));
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test eq3
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
s21_fill_matrix(&test, 0.5);
s21_fill_matrix(&test2, 3);
ck_assert_int_eq(s21_eq_matrix(&test, &test2), 0);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test sum1
s21_create_matrix(3, 2, &test);
ck_assert_int_eq(s21_sum_matrix(NULL, &test, NULL), 1);
s21_remove_matrix(&test);

#test sum2
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
ck_assert_int_eq(s21_sum_matrix(&test, &test2, &result_sum), 2);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test sum3
s21_create_matrix(3, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_sum_matrix(&test, &test, &result_sum), 0);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 2; j++) {
        ck_assert_double_eq_tol(sum_matrix[i][j], result_sum.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_sum);


#test sub1
s21_create_matrix(3, 2, &test);
ck_assert_int_eq(s21_sub_matrix(NULL, &test, NULL), 1);
s21_remove_matrix(&test);

#test sub2
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
ck_assert_int_eq(s21_sub_matrix(&test, &test2, &result_sub), 2);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test sub3
s21_create_matrix(3, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_sub_matrix(&test, &test, &result_sub), 0);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 2; j++) {
        ck_assert_double_eq_tol(sub_matrix[i][j], result_sub.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_sub);


#test mult_num1
ck_assert_int_eq(s21_mult_number(NULL, 0.25, &result_mult_num), 1);

#test mult_num2
s21_create_matrix(3, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_mult_number(&test, 2, &result_mult_num), 0);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 2; j++) {
        ck_assert_double_eq_tol(mult_num_matrix[i][j], result_mult_num.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_mult_num);

#test mult1
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
ck_assert_int_eq(s21_mult_matrix(&test, &test2, NULL), 1);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test mult2
s21_create_matrix(3, 2, &test);
s21_create_matrix(3, 4, &test2);
ck_assert_int_eq(s21_mult_matrix(&test, &test2, &result_mult), 2);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);

#test mult3
s21_create_matrix(2, 2, &test);
s21_create_matrix(2, 2, &test2);
s21_fill_matrix(&test, 1);
s21_fill_matrix(&test2, 1);
ck_assert_int_eq(s21_mult_matrix(&test, &test2, &result_mult), 0);
s21_remove_matrix(&test);
s21_remove_matrix(&test2);
s21_remove_matrix(&result_mult);

#test trans1
ck_assert_int_eq(s21_transpose(NULL, &result_trans), 1);

#test trans2
s21_create_matrix(3, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_transpose(&test, &result_trans), 0);
for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 3; j++) {
        ck_assert_double_eq_tol(trans_matrix[i][j], result_trans.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_trans);


#test deter1
ck_assert_int_eq(s21_determinant(NULL, &deter_result), 1);

#test deter2
s21_create_matrix(3, 2, &test);
ck_assert_int_eq(s21_determinant(&test, &deter_result), 2);
s21_remove_matrix(&test);

#test deter3
s21_create_matrix(1, 1, &test);
s21_fill_matrix(&test, 1);
s21_determinant(&test, &deter_result);
ck_assert_double_eq_tol(1, deter_result, 0.0000001);
s21_remove_matrix(&test);

#test deter4
s21_create_matrix(2, 2, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_determinant(&test, &deter_result), 0);
ck_assert_double_eq_tol(-2, deter_result, 0.0000001);
s21_remove_matrix(&test);

#test deter5
s21_create_matrix(3, 3, &test);
s21_fill_matrix(&test, 3);
s21_determinant(&test, &deter_result);
ck_assert_double_eq_tol(0, deter_result, 0.0000001);
s21_remove_matrix(&test);


#test calc1
ck_assert_int_eq(s21_calc_complements(NULL, &result_calc), 1);

#test calc2
s21_create_matrix(1, 1, &test);
ck_assert_int_eq(s21_calc_complements(&test, &result_calc), 2);
s21_remove_matrix(&test);

#test calc3
s21_create_matrix(3, 3, &test);
test.matrix[0][0] = 1;
test.matrix[0][1] = 2;
test.matrix[0][2] = 3;
test.matrix[1][0] = 0;
test.matrix[1][1] = 4;
test.matrix[1][2] = 2;
test.matrix[2][0] = 5;
test.matrix[2][1] = 2;
test.matrix[2][2] = 1;
ck_assert_int_eq(s21_calc_complements(&test, &result_calc), 0);
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        ck_assert_double_eq_tol(calc_matrix[i][j], result_calc.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_calc);


#test inv1
ck_assert_int_eq(s21_inverse_matrix(NULL, &result_inv), 1);

#test inv2
s21_create_matrix(1, 2, &test);
ck_assert_int_eq(s21_inverse_matrix(&test, &result_inv), 2);
s21_remove_matrix(&test);

#test inv3
s21_create_matrix(2, 2, &test);
s21_fill_matrix(&test, 1.5);
ck_assert_int_eq(s21_inverse_matrix(&test, &result_inv), 0);
for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 2; j++) {
        ck_assert_double_eq_tol(inv_matrix[i][j], result_inv.matrix[i][j], 0.0000001);
    }
}
s21_remove_matrix(&test);
s21_remove_matrix(&result_inv);

#test inv4
s21_create_matrix(3, 3, &test);
s21_fill_matrix(&test, 1);
ck_assert_int_eq(s21_inverse_matrix(&test, &result_inv), 2);
s21_remove_matrix(&test);